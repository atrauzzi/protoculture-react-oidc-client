name: CI/CD
on: push

jobs:

  build:
    name: Build

    runs-on: ubuntu-latest

    steps:
      - uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: '5.x'

      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Fetch master for GitVersion
        if: github.ref != 'refs/heads/master'
        run: git branch --create-reflog master origin/master

      - uses: actions/setup-node@v3

      - name: Install Yarn
        run: npm install -g yarn

      - name: Yarn Install
        run: yarn install --frozen-lockfile

      - name: Lint
        run: yarn lint

      - name: GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.7
        with:
          useConfigFile: true

      - name: Yarn Version
        run: yarn version --no-git-tag-version --new-version ${{ steps.gitversion.outputs.FullSemVer }}

      - name: Build
        run: yarn build

      - name: Prepare Artifact Directory
        run: mkdir artifacts

      - name: Package
        run: yarn pack --filename protoculture-react-oidc-client-${{ steps.gitversion.outputs.FullSemVer }}.tgz

      - name: Publish Package
        run: mv *.tgz artifacts/

      - name: Publish Metadata
        run: |
          echo ${{ steps.gitversion.outputs.FullSemVer }} >> artifacts/version
          echo protoculture-react-oidc-client-${{ steps.gitversion.outputs.FullSemVer }}.tgz >> artifacts/package

      - uses: actions/upload-artifact@v1
        with:
          name: build
          path: ./artifacts/

  release:

    name: Release
    needs: build

    runs-on: ubuntu-latest

    if: github.ref == 'refs/heads/master'

    steps:

      - uses: actions/setup-node@v1
        with:
          always-auth: true
          registry-url: https://registry.npmjs.org
          scope: '@protoculture'
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

      - uses: actions/download-artifact@v1
        with:
          name: build

      - name: Load Metadata
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        run: |
          echo "::set-env name=VERSION::`cat ./build/version`"
          echo "::set-env name=PACKAGE::`cat ./build/package`"

      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: ${{ env.VERSION }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_name: ${{ env.PACKAGE }}
          asset_content_type: application/x-gzip
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./build/${{ env.PACKAGE }}

      - name: Publish Package to NPM
        run: npm publish --access public ./build/${{ env.PACKAGE }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
